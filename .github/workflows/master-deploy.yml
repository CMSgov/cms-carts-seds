name: master-deploy

on:
  push:
    branches:
      - "actions-testing"
    #  - "dev-*"
    #  - "*"
    #  - "dependabot/**"
     # - "!skipci*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SLS_DEPRECATION_DISABLE: "*" # Turn off deprecation warnings in the pipeline
    steps:
      - name: set branch_name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> "$GITHUB_ENV"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
     # - name: set commit_count
      #  run: |
       #   echo "COMMIT_COUNT=`git rev-list HEAD --count` " >> $GITHUB_ENV 
      - name: Run CommitsWithinTime script
        uses: AlexHolderDeveloper/CommitsWithinTime@v1.1.5
        id: commitswithintime
        with:
          hours: 24
      # Use the output from the `commitswithintime` step
      - name: Get the output from CommitsWithinTime and set BUILD TAG
        run: |
          echo "The 'has-new-commits-within-time' value is ${{ steps.commitswithintime.outputs.has-new-commits-within-time }}"
          echo "The 'number-of-commits-within-time' value is ${{ steps.commitswithintime.outputs.number-of-commits-within-time }}"
          echo "The 'total-commits' value is ${{ steps.commitswithintime.outputs.total-commits }}"
          echo "BUILD_TAG=0.1.${{ steps.commitswithintime.outputs.total-commits }}" >> "$GITHUB_ENV"
      - name: Validate branch name
        run: ./.github/branchNameValidation.sh $STAGE_PREFIX$BRANCH_NAME
      - name: set branch specific variable names
        run: |
          ./.github/build_vars.sh set_names
         # echo "BUILD_TAG=0.1.`git rev-list HEAD --count`" >> "$GITHUB_ENV"
      - name: Create env var for  postgress deployer ECR repo name
        run:  echo "ECR_REPOSITORY_POSTGRESS_DEPLOYER=postgres_deployer" >> "$GITHUB_ENV"
      - name: Create env var for  API postgress django ecr repo name
        run:  echo "ECR_REPOSITORY_API_POSTGRESS=postgres_django" >> "$GITHUB_ENV"
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
        #  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        #  CODE_CLIMATE_ID: ${{ secrets.CODE_CLIMATE_ID }}
          VPC_NAME: "macpro-dev"
          OIDC_CLIENT_ID: "0oa4juv4poiQ6nDB6297"
          OIDC_ISSUER: "https://test.idp.idm.cms.gov/oauth2/aus4itu0feyg3RJTK297"
          TF_VAR_openid_discovery_url: "https://test.idp.idm.cms.gov/oauth2/aus4itu0feyg3RJTK297/.well-known/openid-configuration"
          ECR_REPOSITORY_POSTGRESS_DEPLOYER: "postgres_deployer"
          ECR_REPOSITORY_API_POSTGRESS: "postgres_django"
          APPLICATION_BUCKET: ${{secrets.APPLICATION_BUCKET}}
      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
      # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: foo-docker-cache-{hash}
          restore-keys: |
            foo-docker-cache-      
      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock', 'plugins/**') }}
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11
          terraform_wrapper: false
      - name: Chrome setup
        uses: browser-actions/setup-chrome@latest
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push postgres_deployer (data layer) image
        id: postgres_deployer_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_POSTGRESS_DEPLOYER }}
          IMAGE_TAG:  ${{env.BUILD_TAG}}       #${{env.BRANCH_NAME}}-${{ github.sha }} #${{env.BRANCH_NAME}}.${{env.HASH}}
        run: |
          pushd data/postgres_deployer
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${{env.BRANCH_NAME}}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          popd
      - name: Build, tag, and push postgres_django(frontend/api_postgres) image
        id: postgres_django_build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{env.ECR_REPOSITORY_API_POSTGRESS}}
          IMAGE_TAG: ${{env.BUILD_TAG}} #${{env.BRANCH_NAME}}.${{env.HASH}}
        run: |
          pushd frontend/api_postgres
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${{env.BRANCH_NAME}}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          popd
      - name: Build and push react artifacts.
        env:
          IMAGE_TAG: ${{env.BUILD_TAG}}          #${{env.BRANCH_NAME}}-${{ github.sha }} #${{env.BRANCH_NAME}}.${{env.HASH}}
          APPLICATION_BUCKET: ${{secrets.APPLICATION_BUCKET}}
        run: |
          cd frontend/react
          docker run --rm -w /app -v $(pwd):/app node:14.4.0 /bin/bash -c "rm -rf build && npm ci && npm run build && cp env.sh .env build/"
          tar -zcvf cartsbuild.tar.gz build
          aws s3 cp cartsbuild.tar.gz s3://$APPLICATION_BUCKET/artifacts/$IMAGE_TAG/cartsbuild.tar.gz
          rm -rf cartsbuild.tar.gz
      - name: Scan postgres_deployer(data layer) Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{env.ECR_REPOSITORY_API_POSTGRESS}}
          IMAGE_TAG: ${{env.BUILD_TAG}}
        run: |
          aws ecr wait image-scan-complete --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG
          aws ecr describe-image-scan-findings --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG --output json | tee ecr_scan_result_$ECR_REPOSITORY_POSTGRESS_DEPLOYER.json >/dev/null
      - name: Scan postgres_django(frontend/api_postgres) Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{env.ECR_REPOSITORY_API_POSTGRESS}}
          IMAGE_TAG: ${{env.BUILD_TAG}} #${{ github.sha }}
        run: |
          aws ecr wait image-scan-complete --repository-name ${{ env.ECR_REPOSITORY_API_POSTGRESS }} --image-id imageTag=$IMAGE_TAG
          aws ecr describe-image-scan-findings --repository-name ${{ env.ECR_REPOSITORY_API_POSTGRESS }} --image-id imageTag=$IMAGE_TAG --output json | tee ecr_scan_result_$ECR_REPOSITORY_API_POSTGRESS.json >/dev/null
      - name: Archive ecr images scan results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: image_scan_results
          path: ecr_scan_*.json
      - name: Deploy Uploads Scan
        run: |
          cd serverless-uploads
          ./deploy.sh ${{env.BRANCH_NAME}}
      - name: Deploy Data Layer
        run: ./data_layer_deploy.sh ${{secrets.APPLICATION_BUCKET}} ${{env.BRANCH_NAME}} apply application_version=${{env.BUILD_TAG}} vpc_name=macpro-dev
      - name: Archive data aws logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: data-aws-logs
          path: data/aws/log*
      - name: Deploy Frontend Layer
        run: ./frontend_deploy.sh ${{secrets.APPLICATION_BUCKET}} ${{env.BRANCH_NAME}} apply application_version=${{env.BUILD_TAG}} vpc_name=macpro-dev ${{env.BUILD_TAG}}
      - name: Archive Frontend aws logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Frontend-aws-logs
          path: frontend/aws/log*
      - name: Serverless
        run: |
          cd serverless
          ./deploy.sh ${{env.BRANCH_NAME}}
      - name: Push Tags
        run: |
          git tag $BUILD_TAG -f
          git tag master-tag -f
          git push --tags
          

      #- name: Run Test
      #  run: ./test_deploy.sh
  #    - name: Slack Notification
  #      uses: rtCamp/action-slack-notify@v2
  #      if: env.SLACK_WEBHOOK_URL != '' && contains(fromJson('["master", "val", "production"]'), env.branch_name) && failure ()
   #     env:
   #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
   #       SLACK_USERNAME: Destroy Alerts
   #       SLACK_ICON_EMOJI: ":bell:"
   #       SLACK_COLOR: ${{job.status}}
    #      SLACK_FOOTER: ""
    #      MSG_MINIMAL: actions url,commit,ref
    