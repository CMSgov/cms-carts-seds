pipeline {
  agent { label "ec2-jnlp-slave" }
  options {
    disableConcurrentBuilds()
    quietPeriod(0)
    ansiColor('xterm')
  }
  parameters {
    booleanParam(defaultValue: false, name: 'DESTROY_AT_THE_START', description: 'Destroy the current environment at the start of the build')
    booleanParam(defaultValue: true, name: 'DEPLOY', description: 'Deploy the application to Amazon')
    booleanParam(defaultValue: false, name: 'RUN_TESTS', description: 'Run tests against the application')
    booleanParam(defaultValue: false, name: 'DESTROY_AT_THE_END', description: 'Destroy the environment at the end.')
  }
  environment {
    BUILD_TAG = resolveBuildTag()
    VPC_NAME = "macpro-dev"
    OIDC_CLIENT_ID = "0oa4juv4poiQ6nDB6297"
    OIDC_ISSUER = "https://test.idp.idm.cms.gov/oauth2/aus4itu0feyg3RJTK297"
    TF_VAR_openid_discovery_url = "https://test.idp.idm.cms.gov/oauth2/aus4itu0feyg3RJTK297/.well-known/openid-configuration"
  }
  stages {
    stage("Prep Agent") {
      steps {
        script {
          currentBuild.displayName = env.BUILD_TAG

          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          jenkinsUtils.installAwsCli()

          if( env.BUILD_NUMBER == "1" ) {
            env.DEPLOY = true
            env.RUN_TESTS = true
          }
        }
      }
    }

    stage("Serverless") {
      steps {
        script {
          dir('serverless') {
            sh '''
              docker run --rm -w /app -v $(pwd):/app node:12.20.0 /bin/bash -c "./deploy.sh ${JOB_BASE_NAME}"
            '''
          }
        }
      }
    }

    /*
    stage("Run Inspec Scans") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          lock('docker_socket') {
            jenkinsUtils.buildAndPushImageToEcr("saf/postgres_rds", "inspec_postgres_rds", [env.BUILD_TAG, env.JOB_BASE_NAME])
          }
          dir('saf/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "apply",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
            jenkinsUtils.runInspecScan(
              "postgres_rds",
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_task_definition_arn"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_cluster"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_subnets"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_security_group")
            )
          }
        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'saf/aws/inspec_scan_result_*'
          }
        }
      }
    }
    */

  }
}

def resolveBuildTag() {
  return "${BRANCH_NAME}.${GIT_COMMIT}"
}
