service: uploads

frameworkVersion: "2"

plugins:
  - serverless-plugin-scripts
  - serverless-s3-local
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-s3-bucket-helper

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages: # This is a list of common names for important envs that should not be destroyed.  You can remove the stage names your project doesn't use; this list is meant to be inclusive.
      - master
      - val
      - production
      - develop
      - main
      - impl
      - val
      - prod
  scripts:
    hooks:
      # This script is run locally when running 'serverless deploy'
      package:initialize: |
        set -e
        curl -L --output lambda_layer.zip https://github.com/CMSgov/lambda-clamav-layer/releases/download/0.6/lambda_layer.zip
      deploy:finalize: |
        rm lambda_layer.zip
        serverless invoke --stage ${self:custom.stage} --function avDownloadDefinitions -t Event
  s3:
    directory: ./local_buckets
    cors: ./local_cors.xml
    buckets:
      - local-uploads # This is a little silly, but I've spent enough time on it.
        # the serverless-s3-local plugin starts any bucket with a BucketName
        # the attachments bucket has no name, so we need to make one up on our own
layers:
  clamDefs:
    package:
      artifact: lambda_layer.zip

functions:
  avScan:
    handler: src/antivirus.lambdaHandleEvent
    name: ${self:service.name}-${self:custom.stage}-avScan
    role: BucketAVScanRole
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 3008
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"
  avDownloadDefinitions:
    handler: src/download-definitions.lambdaHandleEvent
    events:
      - schedule: cron(20 2 * * ? *)
    role: BucketAVDownloadRole
    timeout: 300 # 300 seconds = 5 minutes
    memorySize: 2048
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:provider.iam.role.permissionsBoundary}
  Resources:
    ClamDefsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service.name}-${self:custom.stage}-avscan-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    ClamDefsBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "AllowSSLRequestsOnly"
              Effect: Deny
              Action: "s3:*"
              Principal: "*"
              Resource:
                - !Sub arn:aws:s3:::${ClamDefsBucket}/*
                - !Sub arn:aws:s3:::${ClamDefsBucket}
              Condition:
                Bool:
                  aws:SecureTransport: false
        Bucket: !Ref ClamDefsBucket
    BucketAVScanRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:provider.iam.role.path}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - ${self:provider.iam.role.permissionsBoundary}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "BucketAVScanRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                    - s3:ListBucket
                  Resource: 
                    - !Sub arn:aws:s3:::cartscms-uploads-${self:custom.stage}/*
                    - !Sub arn:aws:s3:::carts-uploads-${self:custom.stage}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: 
                    - !Sub arn:aws:s3:::cartscms-uploads-${self:custom.stage}
                    - !Sub arn:aws:s3:::carts-uploads-${self:custom.stage}
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                  Resource: !Sub ${ClamDefsBucket.Arn}/*
    BucketAVDownloadRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:provider.iam.role.path}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - ${self:provider.iam.role.permissionsBoundary}
            - !Ref AWS::NoValue
        Policies:
          - PolicyName: "BucketAVDownloadRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:GetObjectTagging
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:PutObjectTagging
                    - s3:PutObjectVersionTagging
                    - s3:ListBucket
                  Resource: !Sub ${ClamDefsBucket.Arn}/*
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource: !GetAtt ClamDefsBucket.Arn
  Outputs:
    BucketAVScanRoleArn:
      Value: !GetAtt BucketAVScanRole.Arn
    AvScanArn:
      Value: !GetAtt AvScanLambdaFunction.Arn
    Region:
      Value: !Sub ${AWS::Region}
