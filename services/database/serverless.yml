service: database

frameworkVersion: "2"

plugins:
  - serverless-dynamodb-local
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket~true, ssm:/configuration/default/s3/accessLogsBucket~true}
    logFilePrefix: ${ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix~true, ssm:/configuration/default/s3/accessLogsPrefix~true}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - master
      - val
      - prod
  stateTableName: ${self:custom.stage}-state
  stateStatusTableName: ${self:custom.stage}-state-status
  sectionTableName: ${self:custom.stage}-section
  sectionBaseTableName: ${self:custom.stage}-section-base
  uploadsTableName: ${self:custom.stage}-uploads
  acsTableName: ${self:custom.stage}-acs
  fmapTableName: ${self:custom.stage}-fmap
  seedOptions:
    prod: false
    val: false
    default:
      domain:
        sources:
          - table: ${self:custom.stateTableName}
            sources: [./seed-state.json]
          - table: ${self:custom.stateStatusTableName}
            sources: [./seed-status.json]
          - table: ${self:custom.sectionTableName}
            sources: [./seed-section.json]
          - table: ${self:custom.sectionBaseTableName}
            sources: [./seed-section-base.json]
          - table: ${self:custom.acsTableName}
            sources: [./seed-acs.json]
          - table: ${self:custom.fmapTableName}
            sources: [./seed-fmap.json]
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed: ${self:custom.seedOptions.${self:custom.stage}, self:custom.seedOptions.default}
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1

resources:
  Resources:
    StateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stateTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    StateStatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stateStatusTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: year
            AttributeType: N
          - AttributeName: stateId
            AttributeType: S
        KeySchema:
          - AttributeName: stateId
            KeyType: HASH
          - AttributeName: year
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    SectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sectionTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sectionId
            AttributeType: N
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sectionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    SectionBaseTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sectionBaseTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: year
            AttributeType: N
          - AttributeName: sectionId
            AttributeType: N
        KeySchema:
          - AttributeName: year
            KeyType: HASH
          - AttributeName: sectionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    UploadsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.uploadsTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: uploadedState
            AttributeType: S
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: uploadedState
            KeyType: HASH
          - AttributeName: fileId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    AcsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.acsTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: stateId
            AttributeType: S
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: uploadedState
            KeyType: HASH
          - AttributeName: fileId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
  Outputs:
    StateTableName:
      Value: !Ref StateTable
    StateTableArn:
      Value: !GetAtt StateTable.Arn
    StateStatusTableName:
      Value: !Ref StateStatusTable
    StateStatusTableArn:
      Value: !GetAtt StateStatusTable.Arn
    SectionTableName:
      Value: !Ref SectionTable
    SectionTableArn:
      Value: !GetAtt SectionTable.Arn
    SectionBaseTable:
      Value: !Ref SectionBaseTable
    SectionBaseTableArn:
      Value: !GetAtt SectionBaseTable.Arn
    UploadsTable:
      Value: !Ref UploadsTable
    UploadsTableArn:
      Value: !GetAtt UploadsTable.Arn
    Region:
      Value: !Sub ${AWS::Region}
