service: carts-bigmac-streams

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-online
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-stack-termination-protection

custom:
  project: "carts"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  boostrapBroker1: ${ssm:/configuration/default/bigmac/bootstrapBroker1}
  boostrapBroker2: ${ssm:/configuration/default/bigmac/bootstrapBroker2}
  boostrapBroker3: ${ssm:/configuration/default/bigmac/bootstrapBroker3}
  bootstrapBrokerStringTls: ${ssm:/configuration/${self:custom.stage}/bigmac/bootstrapBrokerStringTls, ssm:/configuration/default/bigmac/bootstrapBrokerStringTls}
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  vpcSecurityGroup: ${ssm:/configuration/default/vpc/securitygroup}
  privateSubnetA: ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
  privateSubnetB: ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
  privateSubnetC: ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  privateSubnets:
    - ${self:custom.privateSubnetA}
    - ${self:custom.privateSubnetB}
    - ${self:custom.privateSubnetC}
  stageEnrollmentCountsTableName: ${env:stageEnrollmentCountsTableName, cf:database-${self:custom.stage}.StageEnrollmentCountsTableName}
  stateStatusTableStreamArn: ${env:stateStatusTableStreamArn, cf:database-${self:custom.stage}.StateStatusTableStreamArn}
  sectionTableStreamArn: ${env:sectionTableStreamArn, cf:database-${self:custom.stage}.SectionTableStreamArn}
  sedsTopic: "aws.mdct.seds.cdc.state-forms.v0"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:  
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}  
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"
        - Effect: "Allow"
          Action:
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DescribeSecurityGroups"
            - "ec2:DescribeVpcs"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:UpdateItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.stateStatusTableStreamArn}
            - ${self:custom.sectionTableStreamArn}

functions:
  sinkEnrollmentCounts:
    handler: handlers/sinkEnrollmentCounts.handler
    environment:
      stageEnrollmentCountsTableName: ${self:custom.stageEnrollmentCountsTableName}
      sedsTopic: ${self:custom.sedsTopic}
    maximumRetryAttempts: 2
    timeout: 120
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.stateStatusTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.sectionTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:provider.iam.role.permissionsBoundary}
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for configuring the connector.
        VpcId: ${self:custom.vpcId}
    LambdaSecurityGroupIngressCluster:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Sub "${LambdaSecurityGroup}"
        IpProtocol: tcp
        FromPort: 8083
        ToPort: 8083
        SourceSecurityGroupId: !Sub "${LambdaSecurityGroup}"
    SinkEnrollmentCountsEventSourceMappingKafkaAwsmdctsedscdcstateformsv0:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        FunctionName: !GetAtt SinkEnrollmentCountsLambdaFunction.Arn
        SelfManagedEventSource:
          Endpoints:
            KafkaBootstrapServers:
              - ${self:custom.boostrapBroker1}
              - ${self:custom.boostrapBroker2}
              - ${self:custom.boostrapBroker3}
        Topics:
          - ${self:custom.sedsTopic}
        SourceAccessConfigurations:
          - Type: "VPC_SUBNET"
            URI: subnet:${self:custom.privateSubnetA}
          - Type: "VPC_SUBNET"
            URI: subnet:${self:custom.privateSubnetB}
          - Type: "VPC_SUBNET"
            URI: subnet:${self:custom.privateSubnetC}
          - Type: "VPC_SECURITY_GROUP"
            URI: !Sub security_group:${LambdaSecurityGroup}
        MaximumBatchingWindowInSeconds: 30
