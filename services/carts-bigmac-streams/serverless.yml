service: carts-bigmac-streams

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-scripts
  - serverless-online
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-stack-termination-protection

custom:
  project: "carts"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  kafkaConnectImage: ${ssm:/configuration/${self:custom.stage}/kafka_connect_image, ssm:/configuration/default/kafka_connect_image,"confluentinc/cp-kafka-connect:6.2.0"}
  bootstrapBrokerStringTls: ${ssm:/configuration/${self:custom.stage}/bigmac/bootstrapBrokerStringTls, ssm:/configuration/default/bigmac/bootstrapBrokerStringTls}
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  privateSubnetA: ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
  privateSubnetB: ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
  privateSubnetC: ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  privateSubnets:
    - ${self:custom.privateSubnetA}
    - ${self:custom.privateSubnetB}
    - ${self:custom.privateSubnetC}
  stageEnrollmentCountsTableName: ${env:stageEnrollmentCountsTableName, cf:database-${self:custom.stage}.StageEnrollmentCountsTableName}
  stateStatusTableStreamArn: ${env:stateStatusTableStreamArn, cf:database-${self:custom.stage}.StateStatusTableStreamArn}
  sectionTableStreamArn: ${env:sectionTableStreamArn, cf:database-${self:custom.stage}.SectionTableStreamArn}
  scripts:
    hooks:
      deploy:finalize: |
        aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${self:custom.stage}-configureConnectors --invocation-type RequestResponse /dev/null

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:  
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}  
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.stateStatusTableStreamArn}
            - ${self:custom.sectionTableStreamArn}

functions:
  sinkEnrollmentCounts:
    handler: handlers/sinkEnrollmentCounts.handler
    role: SinkEnrollmentCountsRole
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
      stageEnrollmentCountsTableName: ${self:custom.stageEnrollmentCountsTableName}
    maximumRetryAttempts: 2
    timeout: 120
    events:
      - kafka:
          accessConfigurations:
            vpcSubnet:
              - ${self:custom.privateSubnetA}
              - ${self:custom.privateSubnetB}
              - ${self:custom.privateSubnetC}
            vpcSecurityGroup:
              - sg-06e82712b09b545ab
          topic: aws.mdct.seds.cdc.state-forms.v0
          bootstrapServers:
            - b-1.master-msk.zf7e0q.c7.kafka.us-east-1.amazonaws.com:9094
            - b-2.master-msk.zf7e0q.c7.kafka.us-east-1.amazonaws.com:9094
            - b-3.master-msk.zf7e0q.c7.kafka.us-east-1.amazonaws.com:9094
    vpc:
      securityGroupIds:
        - Ref: LambdaConfigureConnectorsSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
  postKafkaData:
    handler: handlers/kafka/post/postKafkaData.handler
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.stateStatusTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
      - stream:
          type: dynamodb
          arn: ${self:custom.sectionTableStreamArn}
          startingPosition: TRIM_HORIZON
          maximumRetryAttempts: 2
          enabled: true
    environment:
      BOOTSTRAP_BROKER_STRING_TLS: ${self:custom.bootstrapBrokerStringTls}
      STAGE: ${self:custom.stage}
    maximumRetryAttempts: 2
    timeout: 120
    memorySize: 2048
    vpc:
      securityGroupIds:
        - Ref: LambdaConfigureConnectorsSecurityGroup
      subnetIds: ${self:custom.privateSubnets}
resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:provider.iam.role.permissionsBoundary}
  Resources:
    LambdaConfigureConnectorsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security Group for configuring the connector.
        VpcId: ${self:custom.vpcId}
    SinkEnrollmentCountsRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Path: ${self:provider.iam.role.path}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - ${self:provider.iam.role.permissionsBoundary}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - !Sub arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: "LambdaRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: "Allow"
                  Action:
                    - "ec2:CreateNetworkInterface"
                    - "ec2:DescribeNetworkInterfaces"
                    - "ec2:DetachNetworkInterface"
                    - "ec2:DeleteNetworkInterface"
                    - "ec2:DescribeSecurityGroups"
                    - "ec2:DescribeVpcs"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "*"
