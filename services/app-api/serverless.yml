# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api

frameworkVersion: "2"

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-associate-waf
  - serverless-offline
  - serverless-stack-termination-protection
  - serverless-idempotency-helper
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-api-client-certificate

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket~true, ssm:/configuration/default/s3/accessLogsBucket~true}
    logFilePrefix: ${ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix~true, ssm:/configuration/default/s3/accessLogsPrefix~true}

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - prod
  acsTableName: ${env:acsTableName, cf:database-${self:custom.stage}.AcsTableName}
  acsTableArn: ${env:acsTableArn, cf:database-${self:custom.stage}.AcsTableArn}
  fmapTableName: ${env:fmapTableName, cf:database-${self:custom.stage}.FmapTableName}
  fmapTableArn: ${env:fmapTableArn, cf:database-${self:custom.stage}.FmapTableArn}
  princeApiHost: ${env:princeApiHost, ssm:/${self:custom.stage}/prince_api_host, ssm:/default/prince_api_host}
  princeApiPath: ${env:princeApiPath, ssm:/${self:custom.stage}/prince_api_path, ssm:/default/prince_api_path}
  stateTableName: ${env:stateTableName, cf:database-${self:custom.stage}.StateTableName}
  stateTableArn: ${env:stateTableArn, cf:database-${self:custom.stage}.StateTableArn}
  stateStatusTableName: ${env:stateStatusTableName, cf:database-${self:custom.stage}.StateStatusTableName}
  stateStatusTableArn: ${env:stateStatusTableArn, cf:database-${self:custom.stage}.StateStatusTableArn}
  sectionTableName: ${env:sectionTableName, cf:database-${self:custom.stage}.SectionTableName}
  sectionTableArn: ${env:sectionTableArn, cf:database-${self:custom.stage}.SectionTableArn}
  sectionBaseTableName: ${env:sectionBaseTableName, cf:database-${self:custom.stage}.SectionBaseTableName}
  sectionBaseTableArn: ${env:sectionBaseTableArn, cf:database-${self:custom.stage}.SectionBaseTableArn}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  fiscalBucketEnv:
    prod: prod
    val: val
    main: main
    default: main
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  warmup:
    default:
      enabled: true
      prewarm: true
      events:
        - schedule: rate(${ssm:/configuration/${self:custom.stage}/warmup/schedule~true, ssm:/configuration/default/warmup/schedule~true, "60 minutes"})
      concurrency: ${ssm:/configuration/${self:custom.stage}/warmup/concurrency~true, ssm:/configuration/default/warmup/concurrency~true, 5}
  authValue:
    main: aws_iam
    master: aws_iam
    val: aws_iam
    prod: aws_iam
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path~true, ssm:/configuration/default/iam/path~true, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy~true, ssm:/configuration/default/iam/permissionsBoundaryPolicy~true, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource:
            - "arn:aws:s3:::uploads-${self.custom.fiscalBucketEnv}-carts-download-${AWS::AccountId}*"
  environment:
    acsTableName: ${self:custom.acsTableName}
    fiscalYearTemplateS3BucketName: ${ssm:/configuration/${self:custom.stage}/s3/fiscalYearTemplateBucket~true, ssm:/configuration/default/s3/fiscalYearTemplateBucket~true}
    fmapTableName: ${self:custom.fmapTableName}
    princeApiHost: ${self:custom.princeApiHost}
    princeApiPath: ${self:custom.princeApiPath}
    stateTableName: ${self:custom.stateTableName}
    stateStatusTableName: ${self:custom.stateStatusTableName}
    sectionTableName: ${self:custom.sectionTableName}
    sectionBaseName: ${self:custom.sectionBaseTableName}
    uploadS3BucketName: ${cf:uploads-${self:custom.stage}.AttachmentsBucketName, ""}
    stage: ${self:custom.stage}

functions:
  getStates:
    handler: handlers/state/get.getStates
    events:
      - http:
          path: state
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getFiscalYearTemplateLink:
    handler: handlers/fiscalYearTemplate/get.getFiscalYearTemplateLink
    events:
      - http:
          path: fiscalYearTemplate
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getStateStatus:
    handler: handlers/stateStatus/get.getStateStatus
    events:
      - http:
          path: state_status
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  updateStateStatus:
    handler: handlers/stateStatus/update.updateStateStatus
    events:
      - http:
          path: state_status/{year}/{state}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  getSections:
    handler: handlers/section/get.getSections
    events:
      - http:
          path: section/{year}/{state}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  updateSections:
    handler: handlers/section/update.updateSections
    events:
      - http:
          path: save_report/{year}/{state}
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  generateFormTemplates:
    handler: handlers/formTemplates/post.post
    events:
      - http:
          path: formTemplates
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  postUpload:
    handler: handlers/uploads/createUploadPsUrl.psUpload
    events:
      - http:
          path: psUrlUpload/{year}/{state}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  postDownload:
    handler: handlers/uploads/createDownloadPsUrl.getSignedFileUrl
    events:
      - http:
          path: psUrlDownload/{year}/{state}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  deleteUpload:
    handler: handlers/uploads/delete.deleteUpload
    events:
      - http:
          path: uploads/{year}/{state}
          method: delete
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  viewUploads:
    handler: handlers/uploads/viewUploaded.viewUploaded
    events:
      - http:
          path: uploads/{year}/{state}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
  printPdf:
    handler: handlers/printing/printPdf.print
    timeout: 30
    events:
      - http:
          path: print_pdf
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.webAclName}
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.webAclName}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
